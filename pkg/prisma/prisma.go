// Code generated by Prisma CLI (https://github.com/prisma/prisma). DO NOT EDIT.

package prisma

import (
	"context"
	"errors"

	"github.com/prisma/prisma-client-lib-go"

	"github.com/machinebox/graphql"
)

var ErrNoResult = errors.New("query returned no result")

func Str(v string) *string { return &v }
func Int32(v int32) *int32 { return &v }
func Bool(v bool) *bool    { return &v }

type BatchPayloadExec struct {
	exec *prisma.BatchPayloadExec
}

func (exec *BatchPayloadExec) Exec(ctx context.Context) (BatchPayload, error) {
	bp, err := exec.exec.Exec(ctx)
	return BatchPayload(bp), err
}

type BatchPayload struct {
	Count int64 `json:"count"`
}

type Aggregate struct {
	Count int64 `json:"count"`
}

type Client struct {
	Client *prisma.Client
}

type Options struct {
	Endpoint string
	Secret   string
}

func New(options *Options, opts ...graphql.ClientOption) *Client {
	endpoint := DefaultEndpoint
	secret := Secret
	if options != nil {
		endpoint = options.Endpoint
		secret = options.Secret
	}
	return &Client{
		Client: prisma.New(endpoint, secret, opts...),
	}
}

func (client *Client) GraphQL(ctx context.Context, query string, variables map[string]interface{}) (map[string]interface{}, error) {
	return client.Client.GraphQL(ctx, query, variables)
}

var DefaultEndpoint = "http://localhost:4466"
var Secret = ""

func (client *Client) Role(params RoleWhereUniqueInput) *RoleExec {
	ret := client.Client.GetOne(
		nil,
		params,
		[2]string{"RoleWhereUniqueInput!", "Role"},
		"role",
		[]string{"id", "name", "description"})

	return &RoleExec{ret}
}

type RolesParams struct {
	Where   *RoleWhereInput   `json:"where,omitempty"`
	OrderBy *RoleOrderByInput `json:"orderBy,omitempty"`
	Skip    *int32            `json:"skip,omitempty"`
	After   *string           `json:"after,omitempty"`
	Before  *string           `json:"before,omitempty"`
	First   *int32            `json:"first,omitempty"`
	Last    *int32            `json:"last,omitempty"`
}

func (client *Client) Roles(params *RolesParams) *RoleExecArray {
	var wparams *prisma.WhereParams
	if params != nil {
		wparams = &prisma.WhereParams{
			Where:   params.Where,
			OrderBy: (*string)(params.OrderBy),
			Skip:    params.Skip,
			After:   params.After,
			Before:  params.Before,
			First:   params.First,
			Last:    params.Last,
		}
	}

	ret := client.Client.GetMany(
		nil,
		wparams,
		[3]string{"RoleWhereInput", "RoleOrderByInput", "Role"},
		"roles",
		[]string{"id", "name", "description"})

	return &RoleExecArray{ret}
}

type RolesConnectionParams struct {
	Where   *RoleWhereInput   `json:"where,omitempty"`
	OrderBy *RoleOrderByInput `json:"orderBy,omitempty"`
	Skip    *int32            `json:"skip,omitempty"`
	After   *string           `json:"after,omitempty"`
	Before  *string           `json:"before,omitempty"`
	First   *int32            `json:"first,omitempty"`
	Last    *int32            `json:"last,omitempty"`
}

func (client *Client) RolesConnection(params *RolesConnectionParams) RoleConnectionExec {
	panic("not implemented")
}

func (client *Client) User(params UserWhereUniqueInput) *UserExec {
	ret := client.Client.GetOne(
		nil,
		params,
		[2]string{"UserWhereUniqueInput!", "User"},
		"user",
		[]string{"id", "name", "email", "password", "createdAt", "updatedAt"})

	return &UserExec{ret}
}

type UsersParams struct {
	Where   *UserWhereInput   `json:"where,omitempty"`
	OrderBy *UserOrderByInput `json:"orderBy,omitempty"`
	Skip    *int32            `json:"skip,omitempty"`
	After   *string           `json:"after,omitempty"`
	Before  *string           `json:"before,omitempty"`
	First   *int32            `json:"first,omitempty"`
	Last    *int32            `json:"last,omitempty"`
}

func (client *Client) Users(params *UsersParams) *UserExecArray {
	var wparams *prisma.WhereParams
	if params != nil {
		wparams = &prisma.WhereParams{
			Where:   params.Where,
			OrderBy: (*string)(params.OrderBy),
			Skip:    params.Skip,
			After:   params.After,
			Before:  params.Before,
			First:   params.First,
			Last:    params.Last,
		}
	}

	ret := client.Client.GetMany(
		nil,
		wparams,
		[3]string{"UserWhereInput", "UserOrderByInput", "User"},
		"users",
		[]string{"id", "name", "email", "password", "createdAt", "updatedAt"})

	return &UserExecArray{ret}
}

type UsersConnectionParams struct {
	Where   *UserWhereInput   `json:"where,omitempty"`
	OrderBy *UserOrderByInput `json:"orderBy,omitempty"`
	Skip    *int32            `json:"skip,omitempty"`
	After   *string           `json:"after,omitempty"`
	Before  *string           `json:"before,omitempty"`
	First   *int32            `json:"first,omitempty"`
	Last    *int32            `json:"last,omitempty"`
}

func (client *Client) UsersConnection(params *UsersConnectionParams) UserConnectionExec {
	panic("not implemented")
}

func (client *Client) CreateRole(params RoleCreateInput) *RoleExec {
	ret := client.Client.Create(
		params,
		[2]string{"RoleCreateInput!", "Role"},
		"createRole",
		[]string{"id", "name", "description"})

	return &RoleExec{ret}
}

type RoleUpdateParams struct {
	Data  RoleUpdateInput      `json:"data"`
	Where RoleWhereUniqueInput `json:"where"`
}

func (client *Client) UpdateRole(params RoleUpdateParams) *RoleExec {
	ret := client.Client.Update(
		prisma.UpdateParams{
			Data:  params.Data,
			Where: params.Where,
		},
		[3]string{"RoleUpdateInput!", "RoleWhereUniqueInput!", "Role"},
		"updateRole",
		[]string{"id", "name", "description"})

	return &RoleExec{ret}
}

type RoleUpdateManyParams struct {
	Data  RoleUpdateManyMutationInput `json:"data"`
	Where *RoleWhereInput             `json:"where,omitempty"`
}

func (client *Client) UpdateManyRoles(params RoleUpdateManyParams) *BatchPayloadExec {
	exec := client.Client.UpdateMany(
		prisma.UpdateParams{
			Data:  params.Data,
			Where: params.Where,
		},
		[2]string{"RoleUpdateManyMutationInput!", "RoleWhereInput"},
		"updateManyRoles")
	return &BatchPayloadExec{exec}
}

type RoleUpsertParams struct {
	Where  RoleWhereUniqueInput `json:"where"`
	Create RoleCreateInput      `json:"create"`
	Update RoleUpdateInput      `json:"update"`
}

func (client *Client) UpsertRole(params RoleUpsertParams) *RoleExec {
	uparams := &prisma.UpsertParams{
		Where:  params.Where,
		Create: params.Create,
		Update: params.Update,
	}
	ret := client.Client.Upsert(
		uparams,
		[4]string{"RoleWhereUniqueInput!", "RoleCreateInput!", "RoleUpdateInput!", "Role"},
		"upsertRole",
		[]string{"id", "name", "description"})

	return &RoleExec{ret}
}

func (client *Client) DeleteRole(params RoleWhereUniqueInput) *RoleExec {
	ret := client.Client.Delete(
		params,
		[2]string{"RoleWhereUniqueInput!", "Role"},
		"deleteRole",
		[]string{"id", "name", "description"})

	return &RoleExec{ret}
}

func (client *Client) DeleteManyRoles(params *RoleWhereInput) *BatchPayloadExec {
	exec := client.Client.DeleteMany(params, "RoleWhereInput", "deleteManyRoles")
	return &BatchPayloadExec{exec}
}

func (client *Client) CreateUser(params UserCreateInput) *UserExec {
	ret := client.Client.Create(
		params,
		[2]string{"UserCreateInput!", "User"},
		"createUser",
		[]string{"id", "name", "email", "password", "createdAt", "updatedAt"})

	return &UserExec{ret}
}

type UserUpdateParams struct {
	Data  UserUpdateInput      `json:"data"`
	Where UserWhereUniqueInput `json:"where"`
}

func (client *Client) UpdateUser(params UserUpdateParams) *UserExec {
	ret := client.Client.Update(
		prisma.UpdateParams{
			Data:  params.Data,
			Where: params.Where,
		},
		[3]string{"UserUpdateInput!", "UserWhereUniqueInput!", "User"},
		"updateUser",
		[]string{"id", "name", "email", "password", "createdAt", "updatedAt"})

	return &UserExec{ret}
}

type UserUpdateManyParams struct {
	Data  UserUpdateManyMutationInput `json:"data"`
	Where *UserWhereInput             `json:"where,omitempty"`
}

func (client *Client) UpdateManyUsers(params UserUpdateManyParams) *BatchPayloadExec {
	exec := client.Client.UpdateMany(
		prisma.UpdateParams{
			Data:  params.Data,
			Where: params.Where,
		},
		[2]string{"UserUpdateManyMutationInput!", "UserWhereInput"},
		"updateManyUsers")
	return &BatchPayloadExec{exec}
}

type UserUpsertParams struct {
	Where  UserWhereUniqueInput `json:"where"`
	Create UserCreateInput      `json:"create"`
	Update UserUpdateInput      `json:"update"`
}

func (client *Client) UpsertUser(params UserUpsertParams) *UserExec {
	uparams := &prisma.UpsertParams{
		Where:  params.Where,
		Create: params.Create,
		Update: params.Update,
	}
	ret := client.Client.Upsert(
		uparams,
		[4]string{"UserWhereUniqueInput!", "UserCreateInput!", "UserUpdateInput!", "User"},
		"upsertUser",
		[]string{"id", "name", "email", "password", "createdAt", "updatedAt"})

	return &UserExec{ret}
}

func (client *Client) DeleteUser(params UserWhereUniqueInput) *UserExec {
	ret := client.Client.Delete(
		params,
		[2]string{"UserWhereUniqueInput!", "User"},
		"deleteUser",
		[]string{"id", "name", "email", "password", "createdAt", "updatedAt"})

	return &UserExec{ret}
}

func (client *Client) DeleteManyUsers(params *UserWhereInput) *BatchPayloadExec {
	exec := client.Client.DeleteMany(params, "UserWhereInput", "deleteManyUsers")
	return &BatchPayloadExec{exec}
}

type RoleOrderByInput string

const (
	RoleOrderByInputIDAsc           RoleOrderByInput = "id_ASC"
	RoleOrderByInputIDDesc          RoleOrderByInput = "id_DESC"
	RoleOrderByInputNameAsc         RoleOrderByInput = "name_ASC"
	RoleOrderByInputNameDesc        RoleOrderByInput = "name_DESC"
	RoleOrderByInputDescriptionAsc  RoleOrderByInput = "description_ASC"
	RoleOrderByInputDescriptionDesc RoleOrderByInput = "description_DESC"
)

type UserOrderByInput string

const (
	UserOrderByInputIDAsc         UserOrderByInput = "id_ASC"
	UserOrderByInputIDDesc        UserOrderByInput = "id_DESC"
	UserOrderByInputNameAsc       UserOrderByInput = "name_ASC"
	UserOrderByInputNameDesc      UserOrderByInput = "name_DESC"
	UserOrderByInputEmailAsc      UserOrderByInput = "email_ASC"
	UserOrderByInputEmailDesc     UserOrderByInput = "email_DESC"
	UserOrderByInputPasswordAsc   UserOrderByInput = "password_ASC"
	UserOrderByInputPasswordDesc  UserOrderByInput = "password_DESC"
	UserOrderByInputCreatedAtAsc  UserOrderByInput = "createdAt_ASC"
	UserOrderByInputCreatedAtDesc UserOrderByInput = "createdAt_DESC"
	UserOrderByInputUpdatedAtAsc  UserOrderByInput = "updatedAt_ASC"
	UserOrderByInputUpdatedAtDesc UserOrderByInput = "updatedAt_DESC"
)

type MutationType string

const (
	MutationTypeCreated MutationType = "CREATED"
	MutationTypeUpdated MutationType = "UPDATED"
	MutationTypeDeleted MutationType = "DELETED"
)

type RoleUpdateInput struct {
	Name        *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
}

type RoleWhereUniqueInput struct {
	ID *string `json:"id,omitempty"`
}

type UserWhereInput struct {
	ID                    *string          `json:"id,omitempty"`
	IDNot                 *string          `json:"id_not,omitempty"`
	IDIn                  []string         `json:"id_in,omitempty"`
	IDNotIn               []string         `json:"id_not_in,omitempty"`
	IDLt                  *string          `json:"id_lt,omitempty"`
	IDLte                 *string          `json:"id_lte,omitempty"`
	IDGt                  *string          `json:"id_gt,omitempty"`
	IDGte                 *string          `json:"id_gte,omitempty"`
	IDContains            *string          `json:"id_contains,omitempty"`
	IDNotContains         *string          `json:"id_not_contains,omitempty"`
	IDStartsWith          *string          `json:"id_starts_with,omitempty"`
	IDNotStartsWith       *string          `json:"id_not_starts_with,omitempty"`
	IDEndsWith            *string          `json:"id_ends_with,omitempty"`
	IDNotEndsWith         *string          `json:"id_not_ends_with,omitempty"`
	Name                  *string          `json:"name,omitempty"`
	NameNot               *string          `json:"name_not,omitempty"`
	NameIn                []string         `json:"name_in,omitempty"`
	NameNotIn             []string         `json:"name_not_in,omitempty"`
	NameLt                *string          `json:"name_lt,omitempty"`
	NameLte               *string          `json:"name_lte,omitempty"`
	NameGt                *string          `json:"name_gt,omitempty"`
	NameGte               *string          `json:"name_gte,omitempty"`
	NameContains          *string          `json:"name_contains,omitempty"`
	NameNotContains       *string          `json:"name_not_contains,omitempty"`
	NameStartsWith        *string          `json:"name_starts_with,omitempty"`
	NameNotStartsWith     *string          `json:"name_not_starts_with,omitempty"`
	NameEndsWith          *string          `json:"name_ends_with,omitempty"`
	NameNotEndsWith       *string          `json:"name_not_ends_with,omitempty"`
	Email                 *string          `json:"email,omitempty"`
	EmailNot              *string          `json:"email_not,omitempty"`
	EmailIn               []string         `json:"email_in,omitempty"`
	EmailNotIn            []string         `json:"email_not_in,omitempty"`
	EmailLt               *string          `json:"email_lt,omitempty"`
	EmailLte              *string          `json:"email_lte,omitempty"`
	EmailGt               *string          `json:"email_gt,omitempty"`
	EmailGte              *string          `json:"email_gte,omitempty"`
	EmailContains         *string          `json:"email_contains,omitempty"`
	EmailNotContains      *string          `json:"email_not_contains,omitempty"`
	EmailStartsWith       *string          `json:"email_starts_with,omitempty"`
	EmailNotStartsWith    *string          `json:"email_not_starts_with,omitempty"`
	EmailEndsWith         *string          `json:"email_ends_with,omitempty"`
	EmailNotEndsWith      *string          `json:"email_not_ends_with,omitempty"`
	Password              *string          `json:"password,omitempty"`
	PasswordNot           *string          `json:"password_not,omitempty"`
	PasswordIn            []string         `json:"password_in,omitempty"`
	PasswordNotIn         []string         `json:"password_not_in,omitempty"`
	PasswordLt            *string          `json:"password_lt,omitempty"`
	PasswordLte           *string          `json:"password_lte,omitempty"`
	PasswordGt            *string          `json:"password_gt,omitempty"`
	PasswordGte           *string          `json:"password_gte,omitempty"`
	PasswordContains      *string          `json:"password_contains,omitempty"`
	PasswordNotContains   *string          `json:"password_not_contains,omitempty"`
	PasswordStartsWith    *string          `json:"password_starts_with,omitempty"`
	PasswordNotStartsWith *string          `json:"password_not_starts_with,omitempty"`
	PasswordEndsWith      *string          `json:"password_ends_with,omitempty"`
	PasswordNotEndsWith   *string          `json:"password_not_ends_with,omitempty"`
	CreatedAt             *string          `json:"createdAt,omitempty"`
	CreatedAtNot          *string          `json:"createdAt_not,omitempty"`
	CreatedAtIn           []string         `json:"createdAt_in,omitempty"`
	CreatedAtNotIn        []string         `json:"createdAt_not_in,omitempty"`
	CreatedAtLt           *string          `json:"createdAt_lt,omitempty"`
	CreatedAtLte          *string          `json:"createdAt_lte,omitempty"`
	CreatedAtGt           *string          `json:"createdAt_gt,omitempty"`
	CreatedAtGte          *string          `json:"createdAt_gte,omitempty"`
	UpdatedAt             *string          `json:"updatedAt,omitempty"`
	UpdatedAtNot          *string          `json:"updatedAt_not,omitempty"`
	UpdatedAtIn           []string         `json:"updatedAt_in,omitempty"`
	UpdatedAtNotIn        []string         `json:"updatedAt_not_in,omitempty"`
	UpdatedAtLt           *string          `json:"updatedAt_lt,omitempty"`
	UpdatedAtLte          *string          `json:"updatedAt_lte,omitempty"`
	UpdatedAtGt           *string          `json:"updatedAt_gt,omitempty"`
	UpdatedAtGte          *string          `json:"updatedAt_gte,omitempty"`
	RolesSome             *RoleWhereInput  `json:"roles_some,omitempty"`
	And                   []UserWhereInput `json:"AND,omitempty"`
}

type UserCreateInput struct {
	ID       *string              `json:"id,omitempty"`
	Name     string               `json:"name"`
	Email    *string              `json:"email,omitempty"`
	Password string               `json:"password"`
	Roles    *RoleCreateManyInput `json:"roles,omitempty"`
}

type RoleUpdateDataInput struct {
	Name        *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
}

type RoleWhereInput struct {
	ID                       *string          `json:"id,omitempty"`
	IDNot                    *string          `json:"id_not,omitempty"`
	IDIn                     []string         `json:"id_in,omitempty"`
	IDNotIn                  []string         `json:"id_not_in,omitempty"`
	IDLt                     *string          `json:"id_lt,omitempty"`
	IDLte                    *string          `json:"id_lte,omitempty"`
	IDGt                     *string          `json:"id_gt,omitempty"`
	IDGte                    *string          `json:"id_gte,omitempty"`
	IDContains               *string          `json:"id_contains,omitempty"`
	IDNotContains            *string          `json:"id_not_contains,omitempty"`
	IDStartsWith             *string          `json:"id_starts_with,omitempty"`
	IDNotStartsWith          *string          `json:"id_not_starts_with,omitempty"`
	IDEndsWith               *string          `json:"id_ends_with,omitempty"`
	IDNotEndsWith            *string          `json:"id_not_ends_with,omitempty"`
	Name                     *string          `json:"name,omitempty"`
	NameNot                  *string          `json:"name_not,omitempty"`
	NameIn                   []string         `json:"name_in,omitempty"`
	NameNotIn                []string         `json:"name_not_in,omitempty"`
	NameLt                   *string          `json:"name_lt,omitempty"`
	NameLte                  *string          `json:"name_lte,omitempty"`
	NameGt                   *string          `json:"name_gt,omitempty"`
	NameGte                  *string          `json:"name_gte,omitempty"`
	NameContains             *string          `json:"name_contains,omitempty"`
	NameNotContains          *string          `json:"name_not_contains,omitempty"`
	NameStartsWith           *string          `json:"name_starts_with,omitempty"`
	NameNotStartsWith        *string          `json:"name_not_starts_with,omitempty"`
	NameEndsWith             *string          `json:"name_ends_with,omitempty"`
	NameNotEndsWith          *string          `json:"name_not_ends_with,omitempty"`
	Description              *string          `json:"description,omitempty"`
	DescriptionNot           *string          `json:"description_not,omitempty"`
	DescriptionIn            []string         `json:"description_in,omitempty"`
	DescriptionNotIn         []string         `json:"description_not_in,omitempty"`
	DescriptionLt            *string          `json:"description_lt,omitempty"`
	DescriptionLte           *string          `json:"description_lte,omitempty"`
	DescriptionGt            *string          `json:"description_gt,omitempty"`
	DescriptionGte           *string          `json:"description_gte,omitempty"`
	DescriptionContains      *string          `json:"description_contains,omitempty"`
	DescriptionNotContains   *string          `json:"description_not_contains,omitempty"`
	DescriptionStartsWith    *string          `json:"description_starts_with,omitempty"`
	DescriptionNotStartsWith *string          `json:"description_not_starts_with,omitempty"`
	DescriptionEndsWith      *string          `json:"description_ends_with,omitempty"`
	DescriptionNotEndsWith   *string          `json:"description_not_ends_with,omitempty"`
	And                      []RoleWhereInput `json:"AND,omitempty"`
}

type RoleUpdateWithWhereUniqueNestedInput struct {
	Where RoleWhereUniqueInput `json:"where"`
	Data  RoleUpdateDataInput  `json:"data"`
}

type RoleSubscriptionWhereInput struct {
	MutationIn                 []MutationType               `json:"mutation_in,omitempty"`
	UpdatedFieldsContains      *string                      `json:"updatedFields_contains,omitempty"`
	UpdatedFieldsContainsEvery []string                     `json:"updatedFields_contains_every,omitempty"`
	UpdatedFieldsContainsSome  []string                     `json:"updatedFields_contains_some,omitempty"`
	Node                       *RoleWhereInput              `json:"node,omitempty"`
	And                        []RoleSubscriptionWhereInput `json:"AND,omitempty"`
}

type RoleUpdateManyInput struct {
	Create     []RoleCreateInput                      `json:"create,omitempty"`
	Update     []RoleUpdateWithWhereUniqueNestedInput `json:"update,omitempty"`
	Upsert     []RoleUpsertWithWhereUniqueNestedInput `json:"upsert,omitempty"`
	Delete     []RoleWhereUniqueInput                 `json:"delete,omitempty"`
	Connect    []RoleWhereUniqueInput                 `json:"connect,omitempty"`
	Set        []RoleWhereUniqueInput                 `json:"set,omitempty"`
	Disconnect []RoleWhereUniqueInput                 `json:"disconnect,omitempty"`
	DeleteMany []RoleScalarWhereInput                 `json:"deleteMany,omitempty"`
	UpdateMany []RoleUpdateManyWithWhereNestedInput   `json:"updateMany,omitempty"`
}

type RoleUpdateManyDataInput struct {
	Name        *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
}

type UserUpdateInput struct {
	Name     *string              `json:"name,omitempty"`
	Email    *string              `json:"email,omitempty"`
	Password *string              `json:"password,omitempty"`
	Roles    *RoleUpdateManyInput `json:"roles,omitempty"`
}

type UserWhereUniqueInput struct {
	ID *string `json:"id,omitempty"`
}

type RoleUpsertWithWhereUniqueNestedInput struct {
	Where  RoleWhereUniqueInput `json:"where"`
	Update RoleUpdateDataInput  `json:"update"`
	Create RoleCreateInput      `json:"create"`
}

type RoleUpdateManyMutationInput struct {
	Name        *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
}

type RoleCreateManyInput struct {
	Create  []RoleCreateInput      `json:"create,omitempty"`
	Connect []RoleWhereUniqueInput `json:"connect,omitempty"`
}

type RoleCreateInput struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Description string  `json:"description"`
}

type UserSubscriptionWhereInput struct {
	MutationIn                 []MutationType               `json:"mutation_in,omitempty"`
	UpdatedFieldsContains      *string                      `json:"updatedFields_contains,omitempty"`
	UpdatedFieldsContainsEvery []string                     `json:"updatedFields_contains_every,omitempty"`
	UpdatedFieldsContainsSome  []string                     `json:"updatedFields_contains_some,omitempty"`
	Node                       *UserWhereInput              `json:"node,omitempty"`
	And                        []UserSubscriptionWhereInput `json:"AND,omitempty"`
}

type RoleScalarWhereInput struct {
	ID                       *string                `json:"id,omitempty"`
	IDNot                    *string                `json:"id_not,omitempty"`
	IDIn                     []string               `json:"id_in,omitempty"`
	IDNotIn                  []string               `json:"id_not_in,omitempty"`
	IDLt                     *string                `json:"id_lt,omitempty"`
	IDLte                    *string                `json:"id_lte,omitempty"`
	IDGt                     *string                `json:"id_gt,omitempty"`
	IDGte                    *string                `json:"id_gte,omitempty"`
	IDContains               *string                `json:"id_contains,omitempty"`
	IDNotContains            *string                `json:"id_not_contains,omitempty"`
	IDStartsWith             *string                `json:"id_starts_with,omitempty"`
	IDNotStartsWith          *string                `json:"id_not_starts_with,omitempty"`
	IDEndsWith               *string                `json:"id_ends_with,omitempty"`
	IDNotEndsWith            *string                `json:"id_not_ends_with,omitempty"`
	Name                     *string                `json:"name,omitempty"`
	NameNot                  *string                `json:"name_not,omitempty"`
	NameIn                   []string               `json:"name_in,omitempty"`
	NameNotIn                []string               `json:"name_not_in,omitempty"`
	NameLt                   *string                `json:"name_lt,omitempty"`
	NameLte                  *string                `json:"name_lte,omitempty"`
	NameGt                   *string                `json:"name_gt,omitempty"`
	NameGte                  *string                `json:"name_gte,omitempty"`
	NameContains             *string                `json:"name_contains,omitempty"`
	NameNotContains          *string                `json:"name_not_contains,omitempty"`
	NameStartsWith           *string                `json:"name_starts_with,omitempty"`
	NameNotStartsWith        *string                `json:"name_not_starts_with,omitempty"`
	NameEndsWith             *string                `json:"name_ends_with,omitempty"`
	NameNotEndsWith          *string                `json:"name_not_ends_with,omitempty"`
	Description              *string                `json:"description,omitempty"`
	DescriptionNot           *string                `json:"description_not,omitempty"`
	DescriptionIn            []string               `json:"description_in,omitempty"`
	DescriptionNotIn         []string               `json:"description_not_in,omitempty"`
	DescriptionLt            *string                `json:"description_lt,omitempty"`
	DescriptionLte           *string                `json:"description_lte,omitempty"`
	DescriptionGt            *string                `json:"description_gt,omitempty"`
	DescriptionGte           *string                `json:"description_gte,omitempty"`
	DescriptionContains      *string                `json:"description_contains,omitempty"`
	DescriptionNotContains   *string                `json:"description_not_contains,omitempty"`
	DescriptionStartsWith    *string                `json:"description_starts_with,omitempty"`
	DescriptionNotStartsWith *string                `json:"description_not_starts_with,omitempty"`
	DescriptionEndsWith      *string                `json:"description_ends_with,omitempty"`
	DescriptionNotEndsWith   *string                `json:"description_not_ends_with,omitempty"`
	And                      []RoleScalarWhereInput `json:"AND,omitempty"`
	Or                       []RoleScalarWhereInput `json:"OR,omitempty"`
	Not                      []RoleScalarWhereInput `json:"NOT,omitempty"`
}

type RoleUpdateManyWithWhereNestedInput struct {
	Where RoleScalarWhereInput    `json:"where"`
	Data  RoleUpdateManyDataInput `json:"data"`
}

type UserUpdateManyMutationInput struct {
	Name     *string `json:"name,omitempty"`
	Email    *string `json:"email,omitempty"`
	Password *string `json:"password,omitempty"`
}

type UserPreviousValuesExec struct {
	exec *prisma.Exec
}

func (instance UserPreviousValuesExec) Exec(ctx context.Context) (*UserPreviousValues, error) {
	var v UserPreviousValues
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance UserPreviousValuesExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type UserPreviousValuesExecArray struct {
	exec *prisma.Exec
}

func (instance UserPreviousValuesExecArray) Exec(ctx context.Context) ([]UserPreviousValues, error) {
	var v []UserPreviousValues
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type UserPreviousValues struct {
	ID        string  `json:"id"`
	Name      string  `json:"name"`
	Email     *string `json:"email,omitempty"`
	Password  string  `json:"password"`
	CreatedAt string  `json:"createdAt"`
	UpdatedAt string  `json:"updatedAt"`
}

type UserExec struct {
	exec *prisma.Exec
}

type RolesParamsExec struct {
	Where   *RoleWhereInput
	OrderBy *RoleOrderByInput
	Skip    *int32
	After   *string
	Before  *string
	First   *int32
	Last    *int32
}

func (instance *UserExec) Roles(params *RolesParamsExec) *RoleExecArray {
	var wparams *prisma.WhereParams
	if params != nil {
		wparams = &prisma.WhereParams{
			Where:   params.Where,
			OrderBy: (*string)(params.OrderBy),
			Skip:    params.Skip,
			After:   params.After,
			Before:  params.Before,
			First:   params.First,
			Last:    params.Last,
		}
	}

	ret := instance.exec.Client.GetMany(
		instance.exec,
		wparams,
		[3]string{"RoleWhereInput", "RoleOrderByInput", "Role"},
		"roles",
		[]string{"id", "name", "description"})

	return &RoleExecArray{ret}
}

func (instance UserExec) Exec(ctx context.Context) (*User, error) {
	var v User
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance UserExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type UserExecArray struct {
	exec *prisma.Exec
}

func (instance UserExecArray) Exec(ctx context.Context) ([]User, error) {
	var v []User
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type User struct {
	ID        string  `json:"id"`
	Name      string  `json:"name"`
	Email     *string `json:"email,omitempty"`
	Password  string  `json:"password"`
	CreatedAt string  `json:"createdAt"`
	UpdatedAt string  `json:"updatedAt"`
}

type RoleExec struct {
	exec *prisma.Exec
}

func (instance RoleExec) Exec(ctx context.Context) (*Role, error) {
	var v Role
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance RoleExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type RoleExecArray struct {
	exec *prisma.Exec
}

func (instance RoleExecArray) Exec(ctx context.Context) ([]Role, error) {
	var v []Role
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type Role struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

type RoleEdgeExec struct {
	exec *prisma.Exec
}

func (instance *RoleEdgeExec) Node() *RoleExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "Role"},
		"node",
		[]string{"id", "name", "description"})

	return &RoleExec{ret}
}

func (instance RoleEdgeExec) Exec(ctx context.Context) (*RoleEdge, error) {
	var v RoleEdge
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance RoleEdgeExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type RoleEdgeExecArray struct {
	exec *prisma.Exec
}

func (instance RoleEdgeExecArray) Exec(ctx context.Context) ([]RoleEdge, error) {
	var v []RoleEdge
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type RoleEdge struct {
	Cursor string `json:"cursor"`
}

type PageInfoExec struct {
	exec *prisma.Exec
}

func (instance PageInfoExec) Exec(ctx context.Context) (*PageInfo, error) {
	var v PageInfo
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance PageInfoExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type PageInfoExecArray struct {
	exec *prisma.Exec
}

func (instance PageInfoExecArray) Exec(ctx context.Context) ([]PageInfo, error) {
	var v []PageInfo
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor,omitempty"`
	EndCursor       *string `json:"endCursor,omitempty"`
}

type RoleSubscriptionPayloadExec struct {
	exec *prisma.Exec
}

func (instance *RoleSubscriptionPayloadExec) Node() *RoleExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "Role"},
		"node",
		[]string{"id", "name", "description"})

	return &RoleExec{ret}
}

func (instance *RoleSubscriptionPayloadExec) PreviousValues() *RolePreviousValuesExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "RolePreviousValues"},
		"previousValues",
		[]string{"id", "name", "description"})

	return &RolePreviousValuesExec{ret}
}

func (instance RoleSubscriptionPayloadExec) Exec(ctx context.Context) (*RoleSubscriptionPayload, error) {
	var v RoleSubscriptionPayload
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance RoleSubscriptionPayloadExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type RoleSubscriptionPayloadExecArray struct {
	exec *prisma.Exec
}

func (instance RoleSubscriptionPayloadExecArray) Exec(ctx context.Context) ([]RoleSubscriptionPayload, error) {
	var v []RoleSubscriptionPayload
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type RoleSubscriptionPayload struct {
	Mutation      MutationType `json:"mutation"`
	UpdatedFields []string     `json:"updatedFields,omitempty"`
}

type RolePreviousValuesExec struct {
	exec *prisma.Exec
}

func (instance RolePreviousValuesExec) Exec(ctx context.Context) (*RolePreviousValues, error) {
	var v RolePreviousValues
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance RolePreviousValuesExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type RolePreviousValuesExecArray struct {
	exec *prisma.Exec
}

func (instance RolePreviousValuesExecArray) Exec(ctx context.Context) ([]RolePreviousValues, error) {
	var v []RolePreviousValues
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type RolePreviousValues struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

type UserEdgeExec struct {
	exec *prisma.Exec
}

func (instance *UserEdgeExec) Node() *UserExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "User"},
		"node",
		[]string{"id", "name", "email", "password", "createdAt", "updatedAt"})

	return &UserExec{ret}
}

func (instance UserEdgeExec) Exec(ctx context.Context) (*UserEdge, error) {
	var v UserEdge
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance UserEdgeExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type UserEdgeExecArray struct {
	exec *prisma.Exec
}

func (instance UserEdgeExecArray) Exec(ctx context.Context) ([]UserEdge, error) {
	var v []UserEdge
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type UserEdge struct {
	Cursor string `json:"cursor"`
}

type RoleConnectionExec struct {
	exec *prisma.Exec
}

func (instance *RoleConnectionExec) PageInfo() *PageInfoExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "PageInfo"},
		"pageInfo",
		[]string{"hasNextPage", "hasPreviousPage", "startCursor", "endCursor"})

	return &PageInfoExec{ret}
}

func (instance *RoleConnectionExec) Edges() *RoleEdgeExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "RoleEdge"},
		"edges",
		[]string{"cursor"})

	return &RoleEdgeExec{ret}
}

func (instance *RoleConnectionExec) Aggregate(ctx context.Context) (Aggregate, error) {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "AggregateRole"},
		"aggregate",
		[]string{"count"})

	var v Aggregate
	_, err := ret.Exec(ctx, &v)
	return v, err
}

func (instance RoleConnectionExec) Exec(ctx context.Context) (*RoleConnection, error) {
	var v RoleConnection
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance RoleConnectionExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type RoleConnectionExecArray struct {
	exec *prisma.Exec
}

func (instance RoleConnectionExecArray) Exec(ctx context.Context) ([]RoleConnection, error) {
	var v []RoleConnection
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type RoleConnection struct {
}

type UserSubscriptionPayloadExec struct {
	exec *prisma.Exec
}

func (instance *UserSubscriptionPayloadExec) Node() *UserExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "User"},
		"node",
		[]string{"id", "name", "email", "password", "createdAt", "updatedAt"})

	return &UserExec{ret}
}

func (instance *UserSubscriptionPayloadExec) PreviousValues() *UserPreviousValuesExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "UserPreviousValues"},
		"previousValues",
		[]string{"id", "name", "email", "password", "createdAt", "updatedAt"})

	return &UserPreviousValuesExec{ret}
}

func (instance UserSubscriptionPayloadExec) Exec(ctx context.Context) (*UserSubscriptionPayload, error) {
	var v UserSubscriptionPayload
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance UserSubscriptionPayloadExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type UserSubscriptionPayloadExecArray struct {
	exec *prisma.Exec
}

func (instance UserSubscriptionPayloadExecArray) Exec(ctx context.Context) ([]UserSubscriptionPayload, error) {
	var v []UserSubscriptionPayload
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type UserSubscriptionPayload struct {
	Mutation      MutationType `json:"mutation"`
	UpdatedFields []string     `json:"updatedFields,omitempty"`
}

type UserConnectionExec struct {
	exec *prisma.Exec
}

func (instance *UserConnectionExec) PageInfo() *PageInfoExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "PageInfo"},
		"pageInfo",
		[]string{"hasNextPage", "hasPreviousPage", "startCursor", "endCursor"})

	return &PageInfoExec{ret}
}

func (instance *UserConnectionExec) Edges() *UserEdgeExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "UserEdge"},
		"edges",
		[]string{"cursor"})

	return &UserEdgeExec{ret}
}

func (instance *UserConnectionExec) Aggregate(ctx context.Context) (Aggregate, error) {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "AggregateUser"},
		"aggregate",
		[]string{"count"})

	var v Aggregate
	_, err := ret.Exec(ctx, &v)
	return v, err
}

func (instance UserConnectionExec) Exec(ctx context.Context) (*UserConnection, error) {
	var v UserConnection
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance UserConnectionExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type UserConnectionExecArray struct {
	exec *prisma.Exec
}

func (instance UserConnectionExecArray) Exec(ctx context.Context) ([]UserConnection, error) {
	var v []UserConnection
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type UserConnection struct {
}
